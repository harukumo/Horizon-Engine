// Constant normal incidence Fresnel factor for all dielectrics.
static const float3 Fdielectric = 0.04;

/* @see http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html */
float RadicalInverse_VdC(uint bits)
{
  bits = (bits << 16u) | (bits >> 16u);
  bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
  bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
  bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
  bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
  /* Same as dividing by 0x100000000. */
  return float(bits) * 2.3283064365386963e-10;
}

float2 Hammersley2D(uint index, uint samples)
{
    return float2(float(index) / float(samples), RadicalInverse_VdC(index));
}

// float2 Hammersley2D(uint index, uint numSamples)
// {
//     uint bits = (index << 16u) | (index >> 16u);
//     bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
//     bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
//     bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
//     bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
//     const float radicalInverse_VdC = float(bits) * 2.3283064365386963e-10;
//     return float2(float(index) / float(numSamples), radicalInverse_VdC);
// }

float3 UniformSampleHemisphere(float2 Xi)
{
    float phi = Xi.y * 2.0 * PI;
    float cosTheta = 1.0 - Xi.x;
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    return float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
}

float3 ImportanceSampleGGX(float2 Xi, float roughness)
{
    float alpha = roughness * roughness;
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (alpha * alpha - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    float3 H = float3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);
    return H;
}

float GeometrySchlicksmithGGX(float NdotL, float NdotV, float roughness)
{
    float k = (roughness * roughness) / 2.0;
    float GL = NdotL / (NdotL * (1.0 - k) + k);
    float GV = NdotV / (NdotV * (1.0 - k) + k);
    return GL * GV;
}

float D_GGX(float NdotH, float roughness)
{
    float alpha = roughness * roughness;
    float alphaSquare = alpha * alpha;
    float denom = (NdotH * NdotH) * (alphaSquare - 1.0) + 1.0;
    return alphaSquare / (PI * denom * denom);
}

float pow5(float x)
{
	float xx = x * x;
	return xx * xx * x;
}

float3 FresnelSchlick1994(float3 F0, float3 F90, float NdotV)
{
	// Schlick 1994, "An Inexpensive BRDF Model for Physically-Based Rendering"
	return F0 + (F90 - F0) * pow5(1.0 - NdotV);
}

float3 FresnelSchlick(float3 F0, float cosTheta)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

float3 BRDFCommon(float3 F0, float cosTheta, float roughness)
{
    return F0 + (max(1.0 - roughness, F0) - F0) * pow(1.0 - cosTheta, 5.0);
}

float GSub(float cosTheta, float k)
{
    return cosTheta / (cosTheta * (1.0 - k) + k);
}

float SchlickGGX(float NdotL, float NdotV, float roughness)
{
    float r = roughness + 1.0;
    // Epic suggests using this roughness remapping for analytic lights.
    float k = (r * r) / 8.0;
    return GSub(NdotL, k) * GSub(NdotV, k);
}
